/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.61
 * Generated at: 2015-05-07 05:02:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import oauth.signpost.OAuthConsumer;
import oauth.signpost.OAuthProvider;
import oauth.signpost.http.HttpParameters;
import oauth.signpost.basic.DefaultOAuthConsumer;
import java.net.HttpURLConnection;
import java.net.URL;
import java.io.*;
import java.net.*;

public final class oauthApiCall_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/oauthHeader.jsp", Long.valueOf(1430298842000L));
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');
      out.write('\n');

	String ConsumerKey = "xVwUtBuC5l2NnMVHc58O";
	String ConsumerSecret = "LIjJJmKJIc";
	String CallbackUrl = "http://localhost:8080/Recommerce_Collector/oauthCallback.jsp";

	String requestTokenUrl = "https://nid.naver.com/naver.oauth?mode=req_req_token";
	String accessTokenUrl = "https://nid.naver.com/naver.oauth?mode=req_acc_token";
	String authorizeUrl = "https://nid.naver.com/naver.oauth?mode=auth_req_token";

      out.write('\n');
      out.write('\n');

	System.setProperty("debug", "true");
	String apiUrl = request.getParameter("apiUrl");

	String strHtml = "";
	String strLine = "";
	int SearchPage = Integer.parseInt(request
			.getParameter("search.page"))+1202;

for(int tmp = 1203; tmp <= 10000; tmp++ )
{
	File fout = new File(
			"/Users/KimHongTae/Downloads/xml_folder2/150502_카페_메타정보_"+tmp+".xml");
	FileOutputStream fos = new FileOutputStream(fout);
	BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos,
			"UTF8"));


		try {
			String parameters = "search.clubid="
					+ request.getParameter("clubid")
					+ "&search.menuid="
					+ request.getParameter("search.menuid")
					+ "&search.page=" + Integer.toString(SearchPage)
					+ "&search.perPage="
					+ request.getParameter("search.perPage");

			String access_token = (String) session
					.getAttribute("access_token");
			String access_token_secret = (String) session
					.getAttribute("access_token_secret");

			OAuthConsumer consumer = new DefaultOAuthConsumer(
					ConsumerKey, ConsumerSecret);
			consumer.setTokenWithSecret(access_token,
					access_token_secret);
			HttpParameters additionalParameters = new HttpParameters();
			additionalParameters.put("realm", apiUrl);
			consumer.setAdditionalParameters(additionalParameters);

			HttpURLConnection httpRequest = null;
			String resultValue = null;

			URL url = new URL(apiUrl + "?" + parameters);
			httpRequest = (HttpURLConnection) url.openConnection();
			httpRequest.setRequestProperty("Content-type",
					"text/xml; charset=UTF-8");
			consumer.sign(httpRequest);
			httpRequest.connect();

			BufferedReader br = new BufferedReader(
					new InputStreamReader(httpRequest.getInputStream(),
							"UTF-8"));
			while ((strLine = br.readLine()) != null) {
				strHtml += strLine;
				bw.write(strLine);
			}

			br.close();

			SearchPage++;

			if (httpRequest != null) {
				httpRequest.disconnect();
			}
		} catch (Exception e3) {
			continue;
		}

	

	String resultValue = strHtml.toString();
	bw.close();
}

      out.write('\n');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
